/*
 * Copyright (C) 2019-2020 Rick Busarow
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.java.source
}

artifacts {
  archives sourcesJar
}

buildscript {

  dependencies {
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.10.0'
  }

  repositories {
    jcenter()
  }

}
repositories {
  jcenter()
}

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')

if (secretPropsFile.exists()) {
  println "Found secret props file, loading props"
  Properties p = new Properties()
  p.load(new FileInputStream(secretPropsFile))
  p.each { name, value ->
    ext[name] = value
  }
} else {
  println "No props file, loading env vars"
  ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
  ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
  ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
  ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
  ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

def dokkaDir = "$buildDir/dokka"
dokka {
  outputFormat = "html"
  outputDirectory = dokkaDir
}
def dokkaJarTaskProvider = tasks.register("dokkaJar", Jar) { task ->
  task.archiveClassifier.set("javadoc")
  task.from(dokkaDir)
  task.dependsOn("dokka")
}

nexusStaging {
  packageGroup = PUBLISH_GROUP_ID
  stagingProfileId = '1d85d183a9d567'
  username = ossrhUsername
  password = ossrhPassword
}

publishing {
  publications {
    release(MavenPublication) {
      groupId PUBLISH_GROUP_ID
      artifactId PUBLISH_ARTIFACT_ID
      version PUBLISH_VERSION
      artifact("build/libs/${project.getName()}-${project.versionName}.jar")
      artifact sourcesJar
      artifact dokkaJarTaskProvider.get()

      pom {
        name = PUBLISH_ARTIFACT_ID
        description = 'Utilities for injecting CoroutineDispatcher options into a CoroutineScope at creation, then locating them via the CoroutineContext'

        url = 'https://github.com/rbusarow/DispatcherProvider'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'rbusarow'
            name = 'Rick Busarow'
            email = 'rickbusarow@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:github.com/rbusarow/DispatcherProvider.git'
          developerConnection = 'scm:git:ssh://github.com/rbusarow/DispatcherProvider.git'
          url = 'https://github.com/rbusarow/DispatcherProvider.git'
        }
        withXml {
          def dependenciesNode = asNode().appendNode('dependencies')

          project.configurations.implementation.allDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = "sonatype"

      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

      credentials {
        username ossrhUsername
        password ossrhPassword
      }
    }
  }
}

signing {
  sign publishing.publications
}
