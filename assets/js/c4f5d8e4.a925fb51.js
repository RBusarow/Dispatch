"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[195],{6417:(e,t,n)=>{n.r(t),n.d(t,{default:()=>D});var a=n(7462),s=n(7294),r=n(3275),i=n(6010),c=n(6556),o=n(8746),l=n(6832),d=n(1402);const u="heroBanner_UJJx",m="buttons_pzbO",h="features_keug",p="feature_nI3B",g="row_BFIh",f="column_hG9l",E="featureImage_yA8i",v="gettingStartedButton_mhEX",y=[{title:"CoroutineDispatcher Injection",code:"fun updateUI() = coroutineScope.launchMain { /* ... */ }\n\nval somethingDeferred = coroutineScope.asyncDefault { /* ... */ }\n\nsuspend fun fetchData() = withIO { /* ... */ }\n\nval state = flow { /* ... */ }.flowOnIO()\n",description:s.createElement(s.Fragment,null,"Change dispatchers without referencing a singleton or injecting a custom object. The dispatchers are a property of the ",s.createElement("code",null,"CoroutineScope")," itself, so it's easy to inject custom dispatchers for testing."),dest:"docs"},{title:"Test Utilities",code:'@Test\nfun someTest() = runBlocking {\n\n  val scope = TestProvidedCoroutineScope()\n  scope.pauseDispatcher()\n\n  // returns a Deferred<Data> using the "IO" dispatcher\n  val dataDeferred = SomeClass(scope).getDataFromNetwork()\n\n  dataDeferred.isCompleted shouldBe false\n\n  scope.resumeDispatcher()\n\n  dataDeferred.isCompleted shouldBe true\n\n  scope.cleanupTestCoroutines()\n}',description:s.createElement(s.Fragment,null,"Dispatch's ",s.createElement("code",null,"TestProvidedCoroutineScope")," is just a",s.createElement("code",null,"TestCoroutineScope")," under the hood, and every dispatcher is a",s.createElement("code",null,"TestCoroutineDispatcher"),".  This means your tests can have granular control over every dispatcher without modifying production code."),dest:"docs/modules/dispatch-test"},{title:"Better Android Lifecycle Awareness",code:"class MyFragment : Fragment() {\n\n  init {\n\n    // dispatchLifecycleScope is bound to the Fragment lifecycle\n    // withViewLifecycle creates a child scope each time the View is created\n    dispatchLifecycleScope.withViewLifecycle(this) {\n      myViewModel.dataFlow\n        .onEach { /* ... */ }\n        // starts and stops collection along with the view lifecycle\n        .launchOnStart()\n    }\n  }\n}",description:s.createElement(s.Fragment,null,"Dispatch integrates with the Android lifecycle in a way similar to what the",s.createElement("code",null,"lifecycle-ktx")," library does, but with more extensibility. The resultant coroutineScopes all contain ",s.createElement("code",null,"DispatcherProviders")," for easy integration with Espresso's ",s.createElement("code",null,"IdlingResource")," system."),dest:"docs/modules/dispatch-android-lifecycle"},{title:"Android Espresso",code:"// Retrieve the DispatcherProvider from a dependency graph,\n// so that the same one is used throughout the codebase.\nval customDispatcherProvider = testAppComponent.customDispatcherProvider\n\n// Automatically register and unregister Dispatch's IdlingResource\n@get:Rule val idlingRule = IdlingDispatcherProviderRule {\n  IdlingDispatcherProvider(customDispatcherProvider)\n}\n\n@Test\nfun testThings() = runBlocking { /* ... */ }",description:s.createElement(s.Fragment,null,"Dispatch will sync all coroutines with Espresso's ",s.createElement("code",null,"IdlingRegistry"),", ensuring that Espresso waits until work is done before performing assertions."),dest:"docs/modules/dispatch-android-espresso"}];function w(e){let{imageUrl:t,title:n,description:a,code:i,dest:c}=e;const o=(0,d.Z)(t);return s.createElement("div",{className:p},s.createElement("div",{className:g},s.createElement("div",{className:f},o&&s.createElement("div",{className:"text--center"},s.createElement("img",{className:E,src:o,alt:n})),s.createElement("h1",{align:"center"},n),s.createElement("p",null,a),s.createElement("a",{href:c},"Read more")),s.createElement("div",{className:f},s.createElement("div",null,s.createElement(r.Z,{className:"language-kotlin"},i)))),s.createElement("hr",null))}const D=function(){const e=(0,l.Z)(),{siteConfig:t={}}=e;return s.createElement(c.Z,{title:""+t.title,description:"Description will go into a meta tag in <head />"},s.createElement("header",{className:(0,i.Z)("hero hero--primary",u)},s.createElement("div",{className:"container"},s.createElement("h1",{className:"hero__title"},t.title),s.createElement("p",{className:"hero__subtitle"},t.tagline),s.createElement("div",{className:m},s.createElement(o.Z,{className:(0,i.Z)("button button--outline button--secondary button--lg",v),to:(0,d.Z)("docs/")},"Get Started")))),s.createElement("main",null,y&&y.length>0&&s.createElement("section",{className:h},s.createElement("div",{className:"container"},s.createElement("div",{className:"row"},y.map(((e,t)=>s.createElement(w,(0,a.Z)({key:t},e)))))))))}}}]);