"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[206],{8809:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=i(7462),n=(i(7294),i(3905));i(8209);const o={id:"intro",title:"Intro",sidebar_label:"Intro",slug:"/"},r=void 0,s={unversionedId:"intro",id:"intro",title:"Intro",description:"Utilities for [kotlinx.coroutines] which make them type-safe, easier to test, and more expressive.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/Dispatch/docs/next/",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/docs/intro.mdx",tags:[],version:"current",frontMatter:{id:"intro",title:"Intro",sidebar_label:"Intro",slug:"/"},sidebar:"Docs",next:{title:"Quick Start",permalink:"/Dispatch/docs/next/quickstart"}},c={},p=[{value:"Injecting dispatchers",id:"injecting-dispatchers",level:2},{value:"Types and Factories",id:"types-and-factories",level:2},{value:"Referencing dispatchers",id:"referencing-dispatchers",level:2},{value:"Builder Extensions",id:"builder-extensions",level:3},{value:"Android Lifecycle",id:"android-lifecycle",level:2},{value:"Android Espresso",id:"android-espresso",level:2},{value:"Android ViewModel",id:"android-viewmodel",level:2},{value:"Testing",id:"testing",level:2},{value:"Modules",id:"modules",level:2},{value:"Full Gradle Config",id:"full-gradle-config",level:2},{value:"License",id:"license",level:2}],l={toc:p};function d(t){let{components:e,...i}=t;return(0,n.kt)("wrapper",(0,a.Z)({},l,i,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Utilities for ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/"},"kotlinx.coroutines")," which make them type-safe, easier to test, and more expressive.\nUse the predefined ",(0,n.kt)("a",{parentName:"p",href:"#types-and-factories"},"types and factories")," or define your own, and never inject\na ",(0,n.kt)("inlineCode",{parentName:"p"},"Dispatchers")," object again."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"val presenter = MyPresenter(MainCoroutineScope())\n\nclass MyPresenter @Inject constructor(\n  /**\n  * Defaults to the Main dispatcher\n  */\n  val coroutineScope: MainCoroutineScope\n) {\n\n  fun loopSomething() = coroutineScope.launchDefault {  }\n\n  suspend fun updateSomething() = withMainImmediate {  }\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyTest {\n\n  @Test\n  fun `no setting the main dispatcher`() = runBlockingProvidedTest {\n\n    // automatically use TestCoroutineDispatcher for every dispatcher type\n    val presenter = MyPresenter(coroutineScope = this)\n\n    // this call would normally crash due to the main looper\n    presenter.updateSomething()\n  }\n\n}\n")),(0,n.kt)("h2",{id:"injecting-dispatchers"},"Injecting dispatchers"),(0,n.kt)("p",null,"Everywhere you use coroutines, you use a ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext"),". If we embed the\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatchers")," settings we want into the context, then we don't need to\npass them around manually."),(0,n.kt)("p",null,"The core of this library is ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," - an interface with properties corresponding to the\n5 different ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatchers")," we can get from the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," singleton.\nIt lives inside the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext"),", and gets passed from parent to child coroutines\ntransparently without any additional code."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface DispatcherProvider : CoroutineContext.Element {\n\n  override val key: CoroutineContext.Key<*> get() = Key\n\n  val default: CoroutineDispatcher\n  val io: CoroutineDispatcher\n  val main: CoroutineDispatcher\n  val mainImmediate: CoroutineDispatcher\n  val unconfined: CoroutineDispatcher\n\n  companion object Key : CoroutineContext.Key<DispatcherProvider>\n}\n\nval someCoroutineScope = CoroutineScope(\n  Job() + Dispatchers.Main + DispatcherProvider()\n)\n")),(0,n.kt)("p",null,"The default implementation of this interface simply delegates to that ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," singleton,\nas that is what we typically want for production usage."),(0,n.kt)("h2",{id:"types-and-factories"},"Types and Factories"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," may have any type of ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher"),".  What if we have a View class which\nwill always use the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html"},"Main")," thread, or one which will always do I/O?"),(0,n.kt)("p",null,"There are marker interfaces and factories to ensure that the correct type of ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," is always used."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Type")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Dispatcher")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-coroutine-scope/index.html"},"DefaultCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html"},"Dispatchers.Default"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-i-o-coroutine-scope/index.html"},"IOCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-io.html"},"Dispatchers.IO"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-coroutine-scope/index.html"},"MainCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html"},"Dispatchers.Main"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-immediate-coroutine-scope/index.html"},"MainImmediateCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/immediate.html"},"Dispatchers.Main.immediate"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-unconfined-coroutine-scope/index.html"},"UnconfinedCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html"},"Dispatchers.Unconfined"))))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"val mainScope = MainCoroutineScope()\n\nval someUIClass = SomeUIClass(mainScope)\n\nclass SomeUIClass(val coroutineScope: MainCoroutineScope) {\n\n  fun foo() = coroutineScope.launch {\n    // because of the dependency type,\n    // we're guaranteed to be on the main dispatcher even though we didn't specify it\n  }\n\n}\n")),(0,n.kt)("h2",{id:"referencing-dispatchers"},"Referencing dispatchers"),(0,n.kt)("p",null,"These ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"dispatcher")," settings can then be accessed via extension functions upon\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),", or the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/coroutine-context.html"},"coroutineContext"),", or directly from extension\nfunctions:"),(0,n.kt)("h3",{id:"builder-extensions"},"Builder Extensions"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null}),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Default")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"IO")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Main")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Main.immediate")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Unconfined")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html"},"Job")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-default.html"},"launchDefault")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-i-o.html"},"launchIO")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-main.html"},"launchMain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-main-immediate.html"},"launchMainImmediate")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-unconfined.html"},"launchUnconfined"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html"},"Deferred")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-default.html"},"asyncDefault")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-i-o.html"},"asyncIO")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-main.html"},"asyncMain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-main-immediate.html"},"asyncMainImmediate")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-unconfined.html"},"asyncUnconfined"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"suspend T")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-default.html"},"withDefault")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-i-o.html"},"withIO")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-main.html"},"withMain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-main-immediate.html"},"withMainImmediate")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-unconfined.html"},"withUnconfined"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Flow<T>")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-default.html"},"flowOnDefault")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-i-o.html"},"flowOnIO")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-main.html"},"flowOnMain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-main-immediate.html"},"flowOnMainImmediate")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-unconfined.html"},"flowOnUnconfined"))))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyClass(val coroutineScope: IOCoroutineScope) {\n\n  fun accessMainThread() = coroutineScope.launchMain {\n    // we\'re now on the "main" thread as defined by the interface\n  }\n\n}\n')),(0,n.kt)("h2",{id:"android-lifecycle"},"Android Lifecycle"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/androidx/releases/lifecycle"},"AndroidX.lifecycle")," library offers a\n",(0,n.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-runtime-ktx/src/main/java/androidx/lifecycle/Lifecycle.kt;l=44"},"lifecycleScope")," extension function to provide a lifecycle-aware\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),", but there are two shortcomings:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"It delegates to a hard-coded ",(0,n.kt)("inlineCode",{parentName:"li"},"Dispatchers.Main")," ",(0,n.kt)("a",{parentName:"li",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher"),", which complicates unit and\n",(0,n.kt)("a",{parentName:"li",href:"https://developer.android.com/training/testing/espresso"},"Espresso")," testing by requiring the use of ",(0,n.kt)("a",{parentName:"li",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/kotlinx.coroutines.-dispatchers/set-main.html"},"Dispatchers.setMain"),"."),(0,n.kt)("li",{parentName:"ol"},"It ",(0,n.kt)("em",{parentName:"li"},"pauses")," the dispatcher when the lifecycle state passes below its threshold, which ",(0,n.kt)("a",{parentName:"li",href:"https://issuetracker.google.com/issues/146370660"},"leaks\nbackpressure to the producing coroutine and can create deadlocks"),".")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/index.html"},"Dispatch-android-lifecycle")," and ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle-extensions/dispatch.android.lifecycle/index.html"},"dispatch-android-lifecycle-extensions")," completely replace the AndroidX version."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'import dispatch.android.lifecycle.*\nimport dispatch.core.*\nimport kotlinx.coroutines.flow.*\n\nclass MyActivity : Activity() {\n\n  init {\n    dispatchLifecycleScope.launchOnCreate {\n          viewModel.someFlow.collect {\n            channel.send("$it")\n          }\n        }\n  }\n}\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/index.html"},"DispatchLifecycleScope")," may be configured with any dispatcher, since\n",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-immediate-coroutine-scope/index.html"},"MainImmediateCoroutineScope")," is just a marker interface. Its lifecycle-aware functions ",(0,n.kt)("em",{parentName:"p"},"cancel"),"\nwhen dropping below a threshold, then automatically restart when entering into the desired lifecycle\nstate again. This is key to preventing the backpressure leak of the AndroidX version, and it's also\nmore analogous to the behavior of ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/LiveData"},"LiveData")," to which many developers are accustomed."),(0,n.kt)("p",null,"There are two built-in ways to define a custom LifecycleCoroutineScope - by simply constructing one\ndirectly inside a Lifecycle class, or by statically setting a custom ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle-extensions/dispatch.android.lifecycle/-lifecycle-scope-factory/index.html"},"LifecycleScopeFactory"),". This\nsecond option can be very useful when utilizing an ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-coroutine-scope/index.html"},"IdlingCoroutineScope"),"."),(0,n.kt)("h2",{id:"android-espresso"},"Android Espresso"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/training/testing/espresso"},"Espresso")," is able to use ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/training/testing/espresso/idling-resource"},"IdlingResource")," to infer when it should perform its actions, which helps\nto reduce the flakiness of tests. Conventional thread-based ",(0,n.kt)("inlineCode",{parentName:"p"},"IdlingResource")," implementations don't\nwork with coroutines, however."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-coroutine-scope/index.html"},"IdlingCoroutineScope")," utilizes ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-dispatcher/index.html"},"IdlingDispatchers"),', which count a coroutine as\nbeing "idle" when it is suspended. Using statically defined factories, service locators, or\ndependency injection, it is possible to utilize idling-aware dispatchers throughout a codebase\nduring Espresso testing.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'class IdlingCoroutineScopeRuleWithLifecycleSample {\n\n\n  val customDispatcherProvider = IdlingDispatcherProvider()\n\n  @JvmField\n  @Rule\n  val idlingRule = IdlingDispatcherProviderRule {\n    IdlingDispatcherProvider(customDispatcherProvider)\n  }\n\n  /**\n  * If you don\'t provide CoroutineScopes to your lifecycle components via a dependency injection framework,\n  * you need to use the `dispatch-android-lifecycle-extensions` and `dispatch-android-viewmodel` artifacts\n  * to ensure that the same `IdlingDispatcherProvider` is used.\n  */\n  @Before\n  fun setUp() {\n    LifecycleScopeFactory.set {\n      MainImmediateCoroutineScope(customDispatcherProvider)\n    }\n    ViewModelScopeFactory.set {\n      MainImmediateCoroutineScope(customDispatcherProvider)\n    }\n  }\n\n  @Test\n  fun testThings() = runBlocking {\n\n    // Now any CoroutineScope which uses the DispatcherProvider\n    // in TestAppComponent will sync its "idle" state with Espresso\n\n  }\n\n}\n')),(0,n.kt)("h2",{id:"android-viewmodel"},"Android ViewModel"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-viewmodel-ktx/src/main/java/androidx/lifecycle/ViewModel.kt;l=42"},"AndroidX ViewModel")," library offers a\n",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/topic/libraries/architecture/coroutines#viewmodelscope"},"viewModelScope")," extension function to provide an auto-cancelled\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),", but again, this ",(0,n.kt)("inlineCode",{parentName:"p"},"CoroutineScope")," is hard-coded and uses ",(0,n.kt)("inlineCode",{parentName:"p"},"Dispatchers.Main"),". This\nlimitation needn't exist."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/index.html"},"Dispatch-android-viewmodel")," doesn't have as many options as its lifecycle counterpart, because the\n",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/ViewModel#onCleared()"},"ViewModel.onCleared")," function is ",(0,n.kt)("inlineCode",{parentName:"p"},"protected")," and ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/ViewModel"},"ViewModel")," does not expose anything about its\nlifecycle. The only way for a third party library to achieve a lifecycle-aware ",(0,n.kt)("inlineCode",{parentName:"p"},"CoroutineScope")," is\nthrough inheritance."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/index.html#dispatch.android.viewmodel/CoroutineViewModel//PointingToDeclaration/"},"CoroutineViewModel")," is a simple abstract class which exposes a lazy ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/-dispatch-view-model/index.html#dispatch.android.viewmodel/DispatchViewModel/viewModelScope/#/PointingToDeclaration/"},"viewModelScope")," property which\nis automatically cancelled when the ",(0,n.kt)("inlineCode",{parentName:"p"},"ViewModel")," is destroyed. The exact type of the ",(0,n.kt)("inlineCode",{parentName:"p"},"viewModelScope"),"\ncan be configured statically via ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/-view-model-scope-factory/index.html"},"ViewModelScopeFactory"),". In this way, you can use\n",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-coroutine-scope/index.html"},"IdlingCoroutineScopes")," for Espresso testing,\n",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-provided-coroutine-scope/index.html"},"TestProvidedCoroutineScopes")," for unit testing, or any other custom\nscope you'd like."),(0,n.kt)("p",null,"If you're using the AAC ",(0,n.kt)("inlineCode",{parentName:"p"},"ViewModel")," but not dependency injection, this artifact should be very\nhelpful with testing."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'import dispatch.android.viewmodel.*\nimport kotlinx.coroutines.flow.*\nimport timber.log.*\n\nclass MyViewModel : CoroutineViewModel() {\n\n  init {\n    MyRepository.someFlow.onEach {\n      Timber.d("$it")\n    }.launchIn(viewModelScope)\n  }\n}\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/index.html"},"DispatchLifecycleScope")," may be configured with any dispatcher, since\n",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-immediate-coroutine-scope/index.html"},"MainImmediateCoroutineScope")," is just a marker interface. Its lifecycle-aware functions ",(0,n.kt)("em",{parentName:"p"},"cancel"),"\nwhen dropping below a threshold, then automatically restart when entering into the desired lifecycle\nstate again. This is key to preventing the backpressure leak of the AndroidX version, and it's also\nmore analogous to the behavior of ",(0,n.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/LiveData"},"LiveData")," to which many developers are accustomed."),(0,n.kt)("p",null,"There are two built-in ways to define a custom LifecycleCoroutineScope - by simply constructing one\ndirectly inside a Lifecycle class, or by statically setting a custom ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle-extensions/dispatch.android.lifecycle/-lifecycle-scope-factory/index.html"},"LifecycleScopeFactory"),". This\nsecond option can be very useful when utilizing an ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-coroutine-scope/index.html"},"IdlingCoroutineScope"),"."),(0,n.kt)("h2",{id:"testing"},"Testing"),(0,n.kt)("p",null,"Testing is why this library exists. ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html"},"TestCoroutineScope")," and ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/index.html"},"TestCoroutineDispatcher")," are very\npowerful when they can be used, but any reference to a statically defined dispatcher (like a\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," property) removes that control."),(0,n.kt)("p",null,"To that end, there's a configurable ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"TestDispatcherProvider"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TestDispatcherProvider(\n  override val default: CoroutineDispatcher = TestCoroutineDispatcher(),\n  override val io: CoroutineDispatcher = TestCoroutineDispatcher(),\n  override val main: CoroutineDispatcher = TestCoroutineDispatcher(),\n  override val mainImmediate: CoroutineDispatcher = TestCoroutineDispatcher(),\n  override val unconfined: CoroutineDispatcher = TestCoroutineDispatcher()\n) : DispatcherProvider\n")),(0,n.kt)("p",null,"As well as a polymorphic ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-provided-coroutine-scope/index.html"},"TestProvidedCoroutineScope")," which may be used in place of any type-specific ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"val testScope = TestProvidedCoroutineScope()\n\nval someUIClass = SomeUIClass(testScope)\n\nclass SomeUIClass(val coroutineScope: MainCoroutineScope) {\n\n  fun foo() = coroutineScope.launch {\n    // ...\n  }\n\n}\n")),(0,n.kt)("p",null,"There's also ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/test-provided.html"},"testProvided"),", which delegates to ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html"},"runBlockingTest")," but which\nincludes a ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"TestDispatcherProvider")," inside the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html"},"TestCoroutineScope"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Subject {\n  // this would normally be a hard-coded reference to Dispatchers.Main\n  suspend fun sayHello() = withMain {  }\n}\n\n@Test\nfun `sayHello should say hello`() = runBlockingProvided {\n\n  val subject = SomeClass(this)\n  // uses "main" TestCoroutineDispatcher safely with no additional setup\n  subject.getSomeData() shouldPrint "hello"\n}\n')),(0,n.kt)("h2",{id:"modules"},"Modules"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"artifact")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"features")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/index.html"},"dispatch-android-espresso")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-dispatcher/index.html"},"IdlingDispatcher")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-dispatcher-provider/index.html"},"IdlingDispatcherProvider"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle-extensions/dispatch.android.lifecycle/index.html"},"dispatch-android-lifecycle-extensions")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle-extensions/dispatch.android.lifecycle/index.html#dispatch.android.lifecycle/dispatchLifecycleScope/androidx.lifecycle.LifecycleOwner#/PointingToDeclaration/"},"dispatchLifecycleScope"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/index.html"},"dispatch-android-lifecycle")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/index.html"},"DispatchLifecycleScope")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/launch-on-create.html"},"launchOnCreate")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/launch-on-start.html"},"launchOnStart")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/-dispatch-lifecycle-scope/launch-on-resume.html"},"launchOnResume")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/on-next-create.html"},"onNextCreate")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/on-next-start.html"},"onNextStart")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/dispatch.android.lifecycle/on-next-resume.html"},"onNextResume"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/index.html"},"dispatch-android-viewmodel")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/index.html#dispatch.android.viewmodel/CoroutineViewModel//PointingToDeclaration/"},"CoroutineViewModel")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-viewmodel/dispatch.android.viewmodel/-dispatch-view-model/index.html#dispatch.android.viewmodel/DispatchViewModel/viewModelScope/#/PointingToDeclaration/"},"viewModelScope"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/index.html"},"dispatch-core")),(0,n.kt)("td",{parentName:"tr",align:null},"Dispatcher-specific types and factories ",(0,n.kt)("p",null)," Dispatcher-specific coroutine builders")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-detekt/dispatch.detekt/index.html"},"dispatch-detekt")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/detekt/detekt"},"Detekt")," rules for common auto-imported-the-wrong-thing problems")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit4/dispatch.test/index.html"},"dispatch-test-junit4")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit4/dispatch.test/-test-coroutine-rule/index.html"},"TestCoroutineRule"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit5/dispatch.test/index.html"},"dispatch-test-junit5")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit5/dispatch.test/-coroutine-test/index.html"},"CoroutineTest")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit5/dispatch.test/-coroutine-test-extension/index.html"},"CoroutineTestExtension"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/index.html"},"dispatch-test")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-provided-coroutine-scope/index.html"},"TestProvidedCoroutineScope")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"TestDispatcherProvider")," ",(0,n.kt)("p",null)," ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/run-blocking-provided.html"},"runBlockingProvided")," and ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/test-provided.html"},"testProvided"))))),(0,n.kt)("h2",{id:"full-gradle-config"},"Full Gradle Config"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  /*\n  production code\n  */\n\n  // core coroutines\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n\n  // everything provides :core via "api", so you only need this if you have no other "implementation" dispatch artifacts\n  implementation("com.rickbusarow.dispatch:dispatch-core:1.0.0-beta10-SNAPSHOT")\n  // LifecycleCoroutineScope for Android Fragments, Activities, etc.\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle:1.0.0-beta10-SNAPSHOT")\n  // lifecycleScope extension function with a settable factory.  Use this if you don\'t DI your CoroutineScopes\n  // This provides :dispatch-android-lifecycle via "api", so you don\'t need to declare both\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle-extensions:1.0.0-beta10-SNAPSHOT")\n  // ViewModelScope for Android ViewModels\n  implementation("com.rickbusarow.dispatch:dispatch-android-viewmodel:1.0.0-beta10-SNAPSHOT")\n\n  /*\n  jvm testing\n  */\n\n  // core coroutines-test\n  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2")\n  // you only need this if you don\'t have the -junit4 or -junit5 artifacts\n  testImplementation("com.rickbusarow.dispatch:dispatch-test:1.0.0-beta10-SNAPSHOT")\n  // CoroutineTestRule and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit5\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit4:1.0.0-beta10-SNAPSHOT")\n  // CoroutineTest, CoroutineTestExtension, and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit4\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit5:1.0.0-beta10-SNAPSHOT")\n  /*\n  Android testing\n  */\n\n  // core android\n  androidTestImplementation("androidx.test:runner:1.3.0")\n  androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")\n  // IdlingDispatcher, IdlingDispatcherProvider, and IdlingCoroutineScope\n  androidTestImplementation("com.rickbusarow.dispatch:dispatch-android-espresso:1.0.0-beta10-SNAPSHOT")\n}\n')),(0,n.kt)("h2",{id:"license"},"License"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},'Copyright (C) 2021 Rick Busarow\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n     http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n')))}d.isMDXComponent=!0},3905:(t,e,i)=>{i.d(e,{Zo:()=>l,kt:()=>u});var a=i(7294);function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,a)}return i}function r(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function s(t,e){if(null==t)return{};var i,a,n=function(t,e){if(null==t)return{};var i,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)i=o[a],e.indexOf(i)>=0||(n[i]=t[i]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)i=o[a],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(n[i]=t[i])}return n}var c=a.createContext({}),p=function(t){var e=a.useContext(c),i=e;return t&&(i="function"==typeof t?t(e):r(r({},e),t)),i},l=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var i=t.components,n=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),h=p(i),u=n,m=h["".concat(c,".").concat(u)]||h[u]||d[u]||o;return i?a.createElement(m,r(r({ref:e},l),{},{components:i})):a.createElement(m,r({ref:e},l))}));function u(t,e){var i=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=i.length,r=new Array(o);r[0]=h;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:n,r[1]=s;for(var p=2;p<o;p++)r[p]=i[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,i)}h.displayName="MDXCreateElement"},8209:(t,e,i)=>{i(7294)}}]);