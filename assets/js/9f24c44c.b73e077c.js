"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[449],{4900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));n(8209);const a={id:"dispatch-android-viewmodel",title:"ViewModel",sidebar_label:"ViewModel"},r=void 0,l={unversionedId:"modules/dispatch-android-viewmodel",id:"version-1.0.0-beta10/modules/dispatch-android-viewmodel",title:"ViewModel",description:"The artifact I hope you don't need, but if you're not doing dependency injection, you probably do.",source:"@site/versioned_docs/version-1.0.0-beta10/modules/dispatch-android-viewmodel.md",sourceDirName:"modules",slug:"/modules/dispatch-android-viewmodel",permalink:"/Dispatch/docs/modules/dispatch-android-viewmodel",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/versioned_docs/version-1.0.0-beta10/modules/dispatch-android-viewmodel.md",tags:[],version:"1.0.0-beta10",frontMatter:{id:"dispatch-android-viewmodel",title:"ViewModel",sidebar_label:"ViewModel"},sidebar:"version-1.0.0-beta10/Basics",previous:{title:"Lifecycle Extensions",permalink:"/Dispatch/docs/modules/dispatch-android-lifecycle-extensions"},next:{title:"Test Core",permalink:"/Dispatch/docs/modules/dispatch-test"}},s={},c=[{value:"Examples",id:"examples",level:2},{value:"Difference from AndroidX",id:"difference-from-androidx",level:2},{value:"Custom CoroutineScope factories",id:"custom-coroutinescope-factories",level:2},{value:"Automatic cancellation in onCleared()",id:"automatic-cancellation-in-oncleared",level:2},{value:"viewModelScope is not lifecycleScope",id:"viewmodelscope-is-not-lifecyclescope",level:2},{value:"Extending ViewModel",id:"extending-viewmodel",level:2},{value:"Minimum Gradle Config",id:"minimum-gradle-config",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The artifact I hope you don't need, but if you're not doing dependency injection, you probably do."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"import dispatch.android.*\n\n// DispatchViewModel is just a ViewModel with a lazy viewModelScope\nclass SomeViewModel : DispatchViewModel() {\n  // ...\n\n  init {\n\n    // auto-creates a MainImmediateCoroutineScope which is closed in onCleared()\n    viewModelScope. //...\n\n    // multiple invocations use the same instance\n    viewModelScope.launch {  }\n\n    // it works as a normal CoroutineScope (because it is)\n    viewModelScope.launchMain {  }\n\n  }\n}\n\nclass SomeApplication : Application() {\n  override fun onCreate() {\n    super.onCreate()\n    // A custom factory can be set to add elements to the CoroutineContext\n    ViewModelScopeFactory.set { MainImmediateCoroutineScope() + SomeCustomElement() }\n  }\n}\n\nclass SomeViewModelTest {\n\n  val viewModel = SomeViewModel()\n\n  @Before\n  fun setUp() {\n    // This custom factory can be used to use custom scopes for testing\n    ViewModelScopeFactory.set { TestProvidedCoroutineScope() }\n  }\n\n  @After\n  fun tearDown() {\n    // The factory can also be reset to default\n    ViewModelScopeFactory.reset()\n  }\n\n  @Test\n  fun someTest() = runBlocking {\n    // the AndroidX version is public, so it's public here as well.\n    viewModel.viewModelScope.launch {  }\n  }\n}\n")),(0,i.kt)("h2",{id:"difference-from-androidx"},"Difference from AndroidX"),(0,i.kt)("p",null,"This module is essentially a fork of ",(0,i.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-viewmodel-ktx/src/main/java/androidx/lifecycle/ViewModel.kt;l=42"},"androidx-lifecycle-viewmodel-ktx")," \u2014 the library which gives us\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/topic/libraries/architecture/coroutines#viewmodelscope"},"viewModelScope")," property."),(0,i.kt)("p",null,"It exists entirely so that we can have a settable factory. This gives us a lot more options for JVM\nor instrumented tests, with custom dispatchers or other custom ",(0,i.kt)("inlineCode",{parentName:"p"},"CoroutineContext")," elements."),(0,i.kt)("h2",{id:"custom-coroutinescope-factories"},"Custom CoroutineScope factories"),(0,i.kt)("p",null,"The way ",(0,i.kt)("inlineCode",{parentName:"p"},"androidx-lifecycle-viewModel")," constructs its ",(0,i.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),"\nis ",(0,i.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-viewmodel-ktx/src/main/java/androidx/lifecycle/ViewModel.kt;l=42"},"hard-coded"),", which eliminates the possibility of using a\ncustom ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext"),"\nsuch as a ",(0,i.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," or ",(0,i.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-dispatcher/index.html"},"IdlingDispatcher"),". With ",(0,i.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-lifecycle/index.html"},"dispatch-android-lifecycle"),", we can set\na custom factory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SomeViewModelTest {\n\n  @Before\n  fun setUp() {\n    // This custom factory can be used to use custom scopes for testing\n    ViewModelScopeFactory.set { TestProvidedCoroutineScope() }\n\n    // it could also return a specific instance\n    val someTestScope = TestProvidedCoroutineScope()\n    ViewModelScopeFactory.set { someTestScope }\n  }\n\n  @After\n  fun tearDown() {\n    // The factory can also be reset to default\n    ViewModelScopeFactory.reset()\n  }\n}\n")),(0,i.kt)("h2",{id:"automatic-cancellation-in-oncleared"},"Automatic cancellation in onCleared()"),(0,i.kt)("p",null,"Just like AndroidX, this version of ",(0,i.kt)("inlineCode",{parentName:"p"},"viewModelScope")," is automatically cancelled\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel.onCleared()"),"."),(0,i.kt)("h2",{id:"viewmodelscope-is-not-lifecyclescope"},"viewModelScope is not lifecycleScope"),(0,i.kt)("p",null,"It's important to remember that ",(0,i.kt)("inlineCode",{parentName:"p"},"onCleared()")," is only called when a ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel")," is about to be\ndestroyed -- when its associated ",(0,i.kt)("inlineCode",{parentName:"p"},"LifecycleOwner"),"(s) are all destroyed. This means that\na ",(0,i.kt)("inlineCode",{parentName:"p"},"viewModelScope")," is active while the ",(0,i.kt)("inlineCode",{parentName:"p"},"LifecycleOwner")," is in the backstack."),(0,i.kt)("p",null,"Consider this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Don't do this\nclass SomeViewModel : DispatchViewModel() {\n\n  init {\n    viewModelScope.launch {\n      // this job will continue forever even if the ViewModel is on the backstack.\n      someRepository.dataFlow.collect {\n        parseData(it)\n      }\n    }\n  }\n}\n")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"CoroutineScope")," in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel"),' is better utilized for single-shot requests which shouldn\'t be\nrestarted in the event of a configuration change.  "Observer" behavior should be scoped to the\nassociated view.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Maybe do this\nclass SomeFragment : Fragment() {\n\n  val viewModel: SomeViewModel by viewModels()\n\n  init {\n    lifecycleScope.launchWhenResumed {\n      viewModel.dataFlow.collect {  }\n    }\n  }\n}\n\nclass SomeViewModel : DispatchViewModel() {\n\n  // a single shot request is made using the viewModelScope\n  val lazyData by lazy {\n    CompletableDeferred<Data>().apply {\n      viewModelScope.launch {\n        complete(someRepository.getData())\n      }\n    }\n  }\n\n  // collection of the Flow is done using the view's lifecycleScope,\n  // meaning that it will stop as soon as the screen is in the backstack\n  val dataFlow = someRepository.dataFlow.onEach {\n    parseData(it)\n  }\n}\n\n")),(0,i.kt)("h2",{id:"extending-viewmodel"},"Extending ViewModel"),(0,i.kt)("p",null,"Since nothing about the ",(0,i.kt)("inlineCode",{parentName:"p"},"clear")," event is actually exposed outside of ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel"),", it's necessary to\nextend ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel")," in order to consume it for cancelling the ",(0,i.kt)("inlineCode",{parentName:"p"},"viewModelScope"),". This is especially\ngalling since ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModel")," could absolutely have just been an interface to begin with."),(0,i.kt)("h2",{id:"minimum-gradle-config"},"Minimum Gradle Config"),(0,i.kt)("p",null,"Add to your module's ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n  implementation("com.rickbusarow.dispatch:dispatch-android-viewmodel:1.0.0-beta10")\n}\n')))}p.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8209:(e,t,n)=>{n(7294)}}]);