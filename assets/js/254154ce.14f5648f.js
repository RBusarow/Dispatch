"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[59],{7261:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=i(7462),n=(i(7294),i(3905));i(8209);const o={id:"dispatch-core",title:"Core",sidebar_label:"Core"},r=void 0,s={unversionedId:"modules/dispatch-core",id:"modules/dispatch-core",title:"Core",description:"Never reference [Dispatchers] again, and never inject a dispatchers interface into your classes.",source:"@site/docs/modules/dispatch-core.md",sourceDirName:"modules",slug:"/modules/dispatch-core",permalink:"/Dispatch/docs/next/modules/dispatch-core",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/docs/modules/dispatch-core.md",tags:[],version:"current",frontMatter:{id:"dispatch-core",title:"Core",sidebar_label:"Core"},sidebar:"Docs",previous:{title:"Quick Start",permalink:"/Dispatch/docs/next/quickstart"},next:{title:"Detekt",permalink:"/Dispatch/docs/next/modules/dispatch-detekt"}},c={},p=[{value:"Types",id:"types",level:2},{value:"Marker interfaces and factories",id:"marker-interfaces-and-factories",level:3},{value:"Extensions",id:"extensions",level:2},{value:"Launch",id:"launch",level:3},{value:"Async",id:"async",level:3},{value:"WithContext",id:"withcontext",level:3},{value:"Flow",id:"flow",level:3},{value:"DefaultDispatcherProvider",id:"defaultdispatcherprovider",level:2},{value:"Out-of-box default functionality",id:"out-of-box-default-functionality",level:3},{value:"Easy global dispatcher overrides",id:"easy-global-dispatcher-overrides",level:3},{value:"Minimum Gradle Config",id:"minimum-gradle-config",level:2}],l={toc:p};function h(t){let{components:e,...i}=t;return(0,n.kt)("wrapper",(0,a.Z)({},l,i,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Never reference ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," again, and never inject a ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatchers")," interface into your classes."),(0,n.kt)("p",null,"All the standard ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher")," types are embedded in a ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext")," and can be\naccessed explicitly or via convenient ",(0,n.kt)("a",{parentName:"p",href:"#extensions"},"extension functions"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(scope: CoroutineScope) {\n  scope.launchDefault {  }\n  scope.launchIO {  }\n  scope.launchMain {  }\n  scope.launchMainImmediate {  }\n  scope.launchUnconfined {  }\n}\n")),(0,n.kt)("p",null,"You can define custom mappings via a ",(0,n.kt)("a",{parentName:"p",href:"#marker-interfaces-and-factories"},"factory"),", making testing\nmuch easier, or use the default, which simply maps to ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'// a standard DispatcherProvider is easy to create\nval myDefaultDispatchProvider = DispatcherProvider()\n\n// but they\'re also very extensible.  This version is interchangeable and is convenient in some test scenarios.\nval myCustomDispatcherProvider = object: DispatcherProvider {\n\n  override val default: CoroutineDispatcher = newSingleThreadCoroutineContext("default")\n  override val io: CoroutineDispatcher = newSingleThreadCoroutineContext("io")\n  override val main: CoroutineDispatcher get() = newSingleThreadCoroutineContext("main")\n  override val mainImmediate: CoroutineDispatcher get() = newSingleThreadCoroutineContext("mainImmediate")\n  override val unconfined: CoroutineDispatcher = newSingleThreadCoroutineContext("unconfined")\n}\n')),(0,n.kt)("p",null,"Custom ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScopes")," interfaces allow for more granularity when defining a class\nor function with a ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," dependency."),(0,n.kt)("p",null,"There are also factory functions for conveniently creating any implementation, with a\nbuilt-in ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"val mainScope = MainCoroutineScope()\n\nval someUIClass = SomeUIClass(mainScope)\n\nclass SomeUIClass(val coroutineScope: MainCoroutineScope) {\n\n  fun foo() = coroutineScope.launch {\n    // ...\n  }\n\n}\n")),(0,n.kt)("h2",{id:"types"},"Types"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Name")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Interface which provides the 5 standard ",(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher")," properties of the ",(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," object, but which can be embedded in a ",(0,n.kt)("a",{parentName:"td",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/index.html"},"DefaultDispatcherProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Mutable singleton holder for an implementation of ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider"),". By default, it simply delegates to the corresponding properties in the ",(0,n.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," singleton. Whenever a ",(0,n.kt)("a",{parentName:"td",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext")," does not have a ",(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider"),", this singleton's value will be used by default.")))),(0,n.kt)("h3",{id:"marker-interfaces-and-factories"},"Marker interfaces and factories"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Name")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Dispatcher")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-coroutine-scope/index.html"},"DefaultCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html#dispatch.core/DispatcherProvider/default/#/PointingToDeclaration/"},"DispatcherProvider.default"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-i-o-coroutine-scope/index.html"},"IOCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html#dispatch.core/DispatcherProvider/io/#/PointingToDeclaration/"},"DispatcherProvider.io"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-coroutine-scope/index.html"},"MainCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html#dispatch.core/DispatcherProvider/main/#/PointingToDeclaration/"},"DispatcherProvider.main"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-main-immediate-coroutine-scope/index.html"},"MainImmediateCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html#dispatch.core/DispatcherProvider/mainImmediate/#/PointingToDeclaration/"},"DispatcherProvider.mainImmediate"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-unconfined-coroutine-scope/index.html"},"UnconfinedCoroutineScope")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html#dispatch.core/DispatcherProvider/unconfined/#/PointingToDeclaration/"},"DispatcherProvider.unconfined"))))),(0,n.kt)("h2",{id:"extensions"},"Extensions"),(0,n.kt)("p",null,"|              | ",(0,n.kt)("strong",{parentName:"p"},"Default"),"     | ",(0,n.kt)("strong",{parentName:"p"},"IO"),"     | ",(0,n.kt)("strong",{parentName:"p"},"Main"),"     | ",(0,n.kt)("strong",{parentName:"p"},"Main.immediate"),"    | ",(0,n.kt)("strong",{parentName:"p"},"\nUnconfined"),"     |\n| ------------ | --------------- | ---------- | ------------ | --------------------- | ------------------ |\n| ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html"},"Job"),"        | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-default.html"},"launchDefault")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-i-o.html"},"launchIO")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-main.html"},"launchMain")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-main-immediate.html"},"launchMainImmediate")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/launch-unconfined.html"},"launchUnconfined"),"\n| ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html"},"Deferred"),"   | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-default.html"},"asyncDefault"),"  | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-i-o.html"},"asyncIO"),"  | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-main.html"},"asyncMain"),"  | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-main-immediate.html"},"asyncMainImmediate"),"  | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/async-unconfined.html"},"asyncUnconfined"),"\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"suspend T"),"  | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-default.html"},"withDefault"),"   | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-i-o.html"},"withIO"),"   | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-main.html"},"withMain"),"   | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-main-immediate.html"},"withMainImmediate"),"   | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/with-unconfined.html"},"withUnconfined"),"\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"Flow<T>"),"    | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-default.html"},"flowOnDefault")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-i-o.html"},"flowOnIO")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-main.html"},"flowOnMain")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-main-immediate.html"},"flowOnMainImmediate")," | ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/flow-on-unconfined.html"},"flowOnUnconfined")),(0,n.kt)("h3",{id:"launch"},"Launch"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(scope: CoroutineScope) {\n  scope.launchDefault {  }\n  scope.launchIO {  }\n  scope.launchMain {  }\n  scope.launchMainImmediate {  }\n  scope.launchUnconfined {  }\n}\n")),(0,n.kt)("h3",{id:"async"},"Async"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(scope: CoroutineScope) {\n  scope.asyncDefault {  }\n  scope.asyncIO {  }\n  scope.asyncMain {  }\n  scope.asyncMainImmediate {  }\n  scope.asyncUnconfined {  }\n}\n")),(0,n.kt)("h3",{id:"withcontext"},"WithContext"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext")," used for ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html"},"withContext")," comes from\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/coroutine-context.html"},"coroutineContext")," top-level suspend property in ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/index.html"},"kotlin.coroutines"),".\nIt returns the current context, so the ",(0,n.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"io"),", etc. used here are the ones defined in\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," of the caller. There is no need to inject any other dependencies."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun foo() {\n  // note that we have no CoroutineContext\n  withDefault {  }\n  withIO {  }\n  withMain {  }\n  withMainImmediate {  }\n  withUnconfined {  }\n}\n")),(0,n.kt)("h3",{id:"flow"},"Flow"),(0,n.kt)("p",null,"Like ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html"},"withContext"),", ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html"},"Flow")," typically doesn\u2019t get a ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," of its own. They inherit\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/coroutine-context.html"},"coroutineContext")," from the collector in a pattern\ncalled ",(0,n.kt)("a",{parentName:"p",href:"https://medium.com/@elizarov/execution-context-of-kotlin-flows-b8c151c9309b"},"context preservation"),". These new operators maintain context\npreservation (",(0,n.kt)("em",{parentName:"p"},"they\u2019re forced to, actually"),"), and extract\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/coroutine-context.html"},"coroutineContext")," from the collector."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"val someFlow = flow {  }\n  .flowOnDefault()\n  .flowOnIO()\n  .flowOnMain()\n  .flowOnMainImmediate()\n  .flowOnUnconfined()\n")),(0,n.kt)("h2",{id:"defaultdispatcherprovider"},"DefaultDispatcherProvider"),(0,n.kt)("p",null,"The simplest way to get up and running with Dispatch. All library access to a\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext's")," ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," filters through a single extension\nproperty:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"public val CoroutineContext.dispatcherProvider: DispatcherProvider\n  get() = get(DispatcherProvider) ?: DefaultDispatcherProvider.get()\n")),(0,n.kt)("p",null,"If the receiver does not have a ",(0,n.kt)("inlineCode",{parentName:"p"},"DispatcherProvider"),", the value from ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/index.html"},"DefaultDispatcherProvider"),"\nwill be returned. In practice, this brings at least two benefits:"),(0,n.kt)("h3",{id:"out-of-box-default-functionality"},"Out-of-box default functionality"),(0,n.kt)("p",null,"Calls such as ",(0,n.kt)("inlineCode",{parentName:"p"},"launchIO { ... }"),"or ",(0,n.kt)("inlineCode",{parentName:"p"},"withMain { ... }")," are safe to use (guaranteed to have a\n",(0,n.kt)("inlineCode",{parentName:"p"},"DispatcherProvider"),") regardless of the source of the ",(0,n.kt)("inlineCode",{parentName:"p"},"CoroutineContext")," or ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," and\nwithout any additional configuration. By default, they will access the corresponding\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatchers")," from the ",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html"},"Dispatchers")," singleton."),(0,n.kt)("h3",{id:"easy-global-dispatcher-overrides"},"Easy global dispatcher overrides"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"DefaultDispatcherProvider")," has similar\n",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/set.html"},"set"),"/",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/set.html"},"reset")," functionality to the\n",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/kotlinx.coroutines.-dispatchers/set-main.html"},"Dispatchers.setMain"),"/",(0,n.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/kotlinx.coroutines.-dispatchers/reset-main.html"},"Dispatchers.resetMain")," extensions in ",(0,n.kt)("inlineCode",{parentName:"p"},"kotlinx-coroutines-test"),", except it\ndoesn't need to be confined to testing."),(0,n.kt)("p",null,"You can use ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/set.html"},"DefaultDispatcherProvider.set")," to globally set a custom implementation at the beginning\nof an application's lifecycle, but the most likely use-case is certainly in testing."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Test\nfun `my test`() = runBlocking {\n\n  DefaultDispatcherProvider.set(TestDispatcherProvider())\n\n  withMain {\n    // this would normally crash without using Dispatchers.setMain\n    // but "main" here comes from the TestDispatcherProvider created above -- not Dispatchers.Main\n  }\n\n  DefaultDispatcherProvider.reset() // from dispatch-test\n}\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"See ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/index.html"},"dispatch-test")," and ",(0,n.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"TestDispatcherProvider"))),(0,n.kt)("h2",{id:"minimum-gradle-config"},"Minimum Gradle Config"),(0,n.kt)("p",null,"Add to your module's ",(0,n.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n  implementation("com.rickbusarow.dispatch:dispatch-core:1.0.0-beta10-SNAPSHOT")\n}\n')))}h.isMDXComponent=!0},3905:(t,e,i)=>{i.d(e,{Zo:()=>l,kt:()=>u});var a=i(7294);function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,a)}return i}function r(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function s(t,e){if(null==t)return{};var i,a,n=function(t,e){if(null==t)return{};var i,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)i=o[a],e.indexOf(i)>=0||(n[i]=t[i]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)i=o[a],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(n[i]=t[i])}return n}var c=a.createContext({}),p=function(t){var e=a.useContext(c),i=e;return t&&(i="function"==typeof t?t(e):r(r({},e),t)),i},l=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var i=t.components,n=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),d=p(i),u=n,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||o;return i?a.createElement(m,r(r({ref:e},l),{},{components:i})):a.createElement(m,r({ref:e},l))}));function u(t,e){var i=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=i.length,r=new Array(o);r[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:n,r[1]=s;for(var p=2;p<o;p++)r[p]=i[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,i)}d.displayName="MDXCreateElement"},8209:(t,e,i)=>{i(7294)}}]);