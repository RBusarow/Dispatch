"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[927],{7659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(7462),a=(n(7294),n(3905));n(8209);const r={id:"dispatch-android-lifecycle-extensions",title:"Lifecycle Extensions",sidebar_label:"Lifecycle Extensions"},o=void 0,c={unversionedId:"modules/dispatch-android-lifecycle-extensions",id:"version-1.0.0-beta10/modules/dispatch-android-lifecycle-extensions",title:"Lifecycle Extensions",description:"Api",source:"@site/versioned_docs/version-1.0.0-beta10/modules/dispatch-android-lifecycle-extensions.md",sourceDirName:"modules",slug:"/modules/dispatch-android-lifecycle-extensions",permalink:"/Dispatch/docs/modules/dispatch-android-lifecycle-extensions",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/versioned_docs/version-1.0.0-beta10/modules/dispatch-android-lifecycle-extensions.md",tags:[],version:"1.0.0-beta10",frontMatter:{id:"dispatch-android-lifecycle-extensions",title:"Lifecycle Extensions",sidebar_label:"Lifecycle Extensions"},sidebar:"version-1.0.0-beta10/Basics",previous:{title:"Lifecycle",permalink:"/Dispatch/docs/modules/dispatch-android-lifecycle"},next:{title:"ViewModel",permalink:"/Dispatch/docs/modules/dispatch-android-viewmodel"}},s={},l=[{value:"Api",id:"api",level:2},{value:"One-time suspend functions",id:"one-time-suspend-functions",level:3},{value:"Difference from AndroidX",id:"difference-from-androidx",level:2},{value:"Custom CoroutineScope factories",id:"custom-coroutinescope-factories",level:2},{value:"Automatic lifecycle jobs",id:"automatic-lifecycle-jobs",level:2},{value:"Minimum Gradle Config",id:"minimum-gradle-config",level:2}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"api"},"Api"),(0,a.kt)("h3",{id:"one-time-suspend-functions"},"One-time suspend functions"),(0,a.kt)("p",null,"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'import dispatch.android.*\n\n// This could be any LifecycleOwner -- Fragments, Activities, Services...\nclass SomeScreen : Fragment() {\n\n  init {\n\n    // auto-created MainImmediateCoroutineScope which is lifecycle-aware\n    dispatchLifecycleScope //...\n\n    // active only when "resumed".  starts a fresh coroutine each time\n    // this is a rough proxy for LiveData behavior\n    dispatchLifecycleScope.launchEveryResume {  }\n\n    // active only when "started".  starts a fresh coroutine each time\n    dispatchLifecycleScope.launchEveryStart {  }\n\n    // launch when created, automatically stop on destroy\n    dispatchLifecycleScope.launchEveryCreate {  }\n\n    // it works as a normal CoroutineScope as well (because it is)\n    dispatchLifecycleScope.launchMain {  }\n\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SomeApplication : Application() {\n  override fun onCreate() {\n    super.onCreate()\n    // A custom factory can be set to add elements to the CoroutineContext\n    LifecycleScopeFactory.set { MainImmediateContext() + SomeCustomElement() }\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SomeEspressoTest {\n  @Before\n  fun setUp() {\n    // This custom factory can be used to use custom scopes for testing,\n    // such as an idling dispatcher\n    LifecycleScopeFactory.set { MainImmediateIdlingCoroutineScope().coroutineContext }\n  }\n\n  @After\n  fun tearDown() {\n    // The factory can also be reset to default\n    LifecycleScopeFactory.reset()\n  }\n}\n")),(0,a.kt)("h2",{id:"difference-from-androidx"},"Difference from AndroidX"),(0,a.kt)("p",null,"This module is really just a slightly different version\nof ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/androidx/releases/lifecycle"},"androidx-lifecycle-runtime-ktx")," \u2014 the library which gives us\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-runtime-ktx/src/main/java/androidx/lifecycle/Lifecycle.kt;l=44"},"lifecycleScope")," property."),(0,a.kt)("p",null,"Why not just use AndroidX? Because we need two things it doesn't offer."),(0,a.kt)("h2",{id:"custom-coroutinescope-factories"},"Custom CoroutineScope factories"),(0,a.kt)("p",null,"The way ",(0,a.kt)("inlineCode",{parentName:"p"},"androidx-lifecycle-runtime")," constructs its ",(0,a.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),"\nis ",(0,a.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-runtime-ktx/src/main/java/androidx/lifecycle/Lifecycle.kt;l=44"},"hard-coded"),", which eliminates the possibility of using a\ncustom ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/"},"CoroutineContext")," such as a ",(0,a.kt)("inlineCode",{parentName:"p"},"DispatcherProvider")," or ",(0,a.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-android-espresso/dispatch.android.espresso/-idling-dispatcher/index.html"},"IdlingDispatcher"),".\nWith ",(0,a.kt)("inlineCode",{parentName:"p"},"dispatch.android.lifecycle"),", we can set a custom factory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SomeFragmentEspressoTest {\n\n  // Not part of this artifact.  see dispatch-android-espresso\n  @JvmField @Rule val idlingRule = IdlingDispatcherProviderRule()\n\n  @Before\n  fun setUp() {\n    // set a custom factory which is applied to all newly created lifecycleScopes\n    LifecycleScopeFactory.set {\n      MainImmediateContext() + idlingRule.dispatcherProvider\n    }\n\n    // now SomeFragment will use an IdlingDispatcher in its CoroutineScope\n  }\n}\n")),(0,a.kt)("h2",{id:"automatic-lifecycle-jobs"},"Automatic lifecycle jobs"),(0,a.kt)("p",null,"Structured concurrency relies upon cancellation,\nbut ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/androidx/releases/lifecycle"},"androidx-lifecycle-runtime.ktx")," doesn't cancel. It uses a\nspecial ",(0,a.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-master-dev:lifecycle/lifecycle-runtime-ktx/src/main/java/androidx/lifecycle/PausingDispatcher.kt"},"PausingDispatcher"),". This pausing behavior then ",(0,a.kt)("strong",{parentName:"p"},"leaks"),"\nupstream, creating backpressure and potentially deadlocks."),(0,a.kt)("p",null,"There's a ",(0,a.kt)("a",{parentName:"p",href:"https://issuetracker.google.com/issues/146370660"},"bug filed in their issue tracker"),", but 2.2.0 got released anyway."),(0,a.kt)("p",null,"This library's API surface is the same as that within the AndroidX version, but has a different\nstrategy for handling lifecycle events. When a lifecycle state enters the desired range, such as\nat ",(0,a.kt)("inlineCode",{parentName:"p"},"ON_RESUME"),", a new coroutine is created. When the state exists the range, that coroutine is ",(0,a.kt)("em",{parentName:"p"},"\ncancelled"),". If the lifecycle state enters the desired range again, a ",(0,a.kt)("strong",{parentName:"p"},"new")," coroutine is created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"import dispatch.android.*\n\nclass SomeFragment : Fragment() {\n\n  val viewModel: SomeViewModel by viewModels()\n\n  init {\n    // automatically created CoroutineScope using the factory described above\n    dispatchLifecycleScope.launchWhenResumed {\n      viewModel.someFlow.consume {  }\n    }\n  }\n\n}\n")),(0,a.kt)("p",null,"This has the desired effect of not leaking backpressure upstream (which in this example is\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"viewModel"),")."),(0,a.kt)("h2",{id:"minimum-gradle-config"},"Minimum Gradle Config"),(0,a.kt)("p",null,"Add to your module's ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle-extensions:1.0.0-beta10")\n\n  implementation("androidx.lifecycle:lifecycle-common:2.2.0")\n}\n')))}p.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(f,o(o({ref:t},d),{},{components:n})):i.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8209:(e,t,n)=>{n(7294)}}]);